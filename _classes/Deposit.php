<?php/** * Class Deposit */class Deposit{    /**     * attributes of the class     */    /**     * @var int     */    private $idD;    /**     * @var int     */    private $depositnumber;    /**     * @var string     */    private $date;    /**     * @var float     */    private $totalwt;    /**     * @var float     */    private $vat;    /**     * @var float     */    private $totalttc;    /**     * @var string     */    private $message;    /**     * @var int     */    private $site_id;    /*================== Getters and Setters =====================*/    /**     * @return int     */    public function getIdD()    {        return $this->idD;    }    /**     * @param int $idD     * @return Deposit     */    public function setIdD($idD)    {        $this->idD = $idD;        return $this;    }    /**     * @return int     */    public function getDepositnumber()    {        return $this->depositnumber;    }    /**     * @param int $depositnumber     * @return Deposit     */    public function setDepositnumber($depositnumber)    {        $this->depositnumber = $depositnumber;        return $this;    }    /**     * @return string     */    public function getDate()    {        return $this->date;    }    /**     * @param string $date     * @return Deposit     */    public function setDate($date)    {        $this->date = $date;        return $this;    }    /**     * @return float     */    public function getTotalwt()    {        return $this->totalwt;    }    /**     * @param float $totalwt     * @return Deposit     */    public function setTotalwt($totalwt)    {        $this->totalwt = $totalwt;        return $this;    }    /**     * @return float     */    public function getVat()    {        return $this->vat;    }    /**     * @param float $vat     * @return Deposit     */    public function setVat($vat)    {        $this->vat = $vat;        return $this;    }    /**     * @return float     */    public function getTotalttc()    {        return $this->totalttc;    }    /**     * @param float $totalttc     * @return Deposit     */    public function setTotalttc($totalttc)    {        $this->totalttc = $totalttc;        return $this;    }    /**     * @return string     */    public function getMessage()    {        return $this->message;    }    /**     * @param string $message     * @return Deposit     */    public function setMessage($message)    {        $this->message = $message;        return $this;    }    /**     * @return int     */    public function getSiteId()    {        return $this->site_id;    }    /**     * @param int $site_id     * @return Deposit     */    public function setSiteId($site_id)    {        $this->site_id = $site_id;        return $this;    }    /*==========================================================Creation of CRUD C:insert  R:select U:update D:delete==========================================================*/    /**     * Deposit insertion function     */    function addDeposit()    {        global $db;        $requete = $db->prepare('INSERT INTO deposit            (depositnumber,totalwt,vat,totalttc,message,site_id)           values(?,?,?,?,?,?)');        $requete->execute(array(            $this->depositnumber,            $this->totalwt,            $this->vat,            $this->totalttc,            $this->message,            $this->site_id        ));    }    /**     * Display function deposit     * @return false|PDOStatement     */    function getAlldeposit()    {        global $db;        $depositListe = $db->query('SELECT idD, depositnumber, date , totalwt , vat , totalttc , message ,        site_id , initialmonatant , totalpayments , remainingbalance , quotation_id        FROM deposit INNER JOIN sites WHERE deposit.site_id = sites.idS ORDER BY idD DESC');        return $depositListe;    }    /**     * Update deposit function     */    function updateMessageDeposit()    {        global $db;        $requete = $db->prepare('UPDATE deposit SET message = ? WHERE idD = ?');        $requete->execute(array(            $this->message,            $this->idD        ));    }    /**     * Update deposit function     */    function updateTotalDeposit()    {        global $db;        $requete = $db->prepare('UPDATE deposit SET totalwt = ? , vat = ? , totalttc = ?  WHERE idD = ?');        $requete->execute(array(            $this->totalwt,            $this->vat,            $this->totalttc,            $this->idD        ));    }    /**     * Function of recovery data     * @param $id     * @return bool|PDOStatement     */    function recupDepositdetails($id)    {        global $db;        $depositListe = $db->prepare('SELECT depositnumber,totalwt,vat,totalttc,message,site_id        FROM deposit WHERE idD = ?');        $depositListe->execute(array($id));        return $depositListe;    }    /**     * Delete deposit function     */    function deleteDeposit()    {        global $db;        $requete = $db->prepare('DELETE FROM deposit WHERE idD = ?');        $requete->execute(array($this->idD));    }    /**     * check the existence of an site_id     * @param $id     * @return int     */    function countDepositSiteId($id)    {        global $db;        $reqSite = $db->prepare('SELECT * FROM deposit WHERE site_id = ?');        $reqSite->execute(array($id));        $var = $reqSite->rowCount();        return $var;    }    /**     * Function of recovery id     * @param $depositnumber     * @return mixed|null     */    function recupDepositId($depositnumber)    {        global $db;        $var = null;        $reqDepositId = $db->prepare("SELECT idD FROM deposit WHERE depositnumber=?");        $reqDepositId->execute(array($depositnumber));        $var = $reqDepositId->fetchColumn();        if ($var != null) {            return $var;        }    }    /**     * check the existence of an deposit number     * @param $quotationnumber     * @return bool     */    function isDepositnumberExiste($depositnumber)    {        global $db;        $existe = false;        $reqDeposit = $db->prepare('SELECT * FROM deposit WHERE depositnumber = ?');        $reqDeposit->execute(array($depositnumber));        if ($reqDeposit->rowCount() == 1) {            $existe = true;        }        return $existe;    }}